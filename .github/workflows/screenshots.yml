name: Automated Screenshots

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  screenshots:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Node.js dependencies
      run: npm install
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Setup Django database
      run: |
        # Use --run-syncdb to create tables without migrations
        python manage.py migrate --run-syncdb
        
        # Then apply any remaining migrations
        python manage.py migrate --fake-initial || python manage.py migrate
    
    - name: Start Django backend
      run: |
        python manage.py runserver &
        sleep 10
    
    - name: Start React frontend
      run: |
        cd frontend
        npm install
        npm start &
        sleep 30
    
    - name: Capture screenshots
      run: npm run screenshots
    
    - name: Upload screenshots to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: screenshots
        path: screenshots/
        retention-days: 30
    
    - name: Upload screenshots to repository
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        # Create screenshots directory in repo
        mkdir -p docs/screenshots
        
        # Copy screenshots to docs directory
        cp screenshots/*.png docs/screenshots/ 2>/dev/null || true
        
        # Add and commit screenshots
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/screenshots/
        git commit -m "Update screenshots [skip ci]" || exit 0
        git push
    
    - name: Update README with screenshots
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read current README
          const readmePath = './README.md';
          let readmeContent = fs.readFileSync(readmePath, 'utf8');
          
          // Screenshot definitions
          const screenshots = [
            {
              name: 'home-dashboard',
              title: 'Main Dashboard',
              description: 'Financial overview with key metrics and quick actions'
            },
            {
              name: 'file-upload',
              title: 'File Upload',
              description: 'Drag-and-drop interface for bank statement uploads'
            },
            {
              name: 'transactions-list',
              title: 'Transactions',
              description: 'Comprehensive transaction management and categorization'
            },
            {
              name: 'analytics-visualizations',
              title: 'Analytics',
              description: 'Interactive charts and spending insights'
            },
            {
              name: 'accounts-management',
              title: 'Account Management',
              description: 'Multi-bank account setup and management'
            },
            {
              name: 'settings-page',
              title: 'Settings',
              description: 'Application preferences and configuration'
            }
          ];
          
          // Generate screenshots section
          let screenshotsSection = '## ðŸ“¸ Screenshots\n\n';
          screenshotsSection += 'Here are the latest screenshots of the MyFinance Dashboard:\n\n';
          
          screenshots.forEach(screenshot => {
            const imageUrl = `https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/${context.sha}/docs/screenshots/${screenshot.name}.png`;
            screenshotsSection += `### ${screenshot.title}\n`;
            screenshotsSection += `*${screenshot.description}*\n\n`;
            screenshotsSection += `![${screenshot.title}](${imageUrl})\n\n`;
          });
          
          // Check if screenshots section already exists
          const screenshotsRegex = /## ðŸ“¸ Screenshots[\s\S]*?(?=## |$)/;
          if (screenshotsRegex.test(readmeContent)) {
            // Replace existing screenshots section
            readmeContent = readmeContent.replace(screenshotsRegex, screenshotsSection);
          } else {
            // Add screenshots section after the main description
            const insertPoint = readmeContent.indexOf('---\n\n## Features');
            if (insertPoint !== -1) {
              readmeContent = readmeContent.slice(0, insertPoint) + 
                            screenshotsSection + 
                            readmeContent.slice(insertPoint);
            } else {
              // Fallback: add at the end
              readmeContent += '\n\n' + screenshotsSection;
            }
          }
          
          // Write updated README
          fs.writeFileSync(readmePath, readmeContent);
          
          // Commit the changes
          const { execSync } = require('child_process');
          execSync('git config --local user.email "action@github.com"');
          execSync('git config --local user.name "GitHub Action"');
          execSync('git add README.md');
          execSync('git commit -m "Update README with latest screenshots [skip ci]" || exit 0');
          execSync('git push');
    
    - name: Comment PR with screenshots
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const screenshotsDir = './screenshots';
          if (fs.existsSync(screenshotsDir)) {
            const files = fs.readdirSync(screenshotsDir);
            const imageFiles = files.filter(file => file.endsWith('.png'));
            
            if (imageFiles.length > 0) {
              let comment = '## ðŸ“¸ Automated Screenshots\n\n';
              comment += 'The following screenshots were automatically captured:\n\n';
              
              imageFiles.forEach(file => {
                comment += `- \`${file}\`\n`;
              });
              
              comment += '\n*Screenshots are available in the artifacts section.*';
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          }
